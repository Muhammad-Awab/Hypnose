@page "/counter"

@inject IJSRuntime JS
<h3>IronPdfComponent</h3>
<EditForm Model="@_InputMsgModel" id="inputText">
   @* <div>
        <InputTextArea @bind-Value="@_InputMsgModel.HTML" rows="20" />
    </div>*@
    <div>
        <button @onclick="SubmitHTML">Render HTML</button>
    </div>
   <table>
        @for (int i = 0; i < 6; i++)
        {
        <tr>
            <td>@i</td><td>@(_InputMsgModel.HTML="some text")</td>
        </tr>
        }
   </table>
</EditForm>

@code {
    InputHTMLModel _InputMsgModel = new InputHTMLModel();
    private async Task SubmitHTML()
    {
        var render = new IronPdf.ChromePdfRenderer();
        var doc = render.RenderHtmlAsPdf(_InputMsgModel.HTML);
        var fileName = "iron.pdf";
        using var streamRef = new DotNetStreamReference(stream: doc.Stream);
        await JS.InvokeVoidAsync("SubmitHTML", fileName, streamRef);
    }
    public class InputHTMLModel
    {
        public string HTML { get; set; } = "My new message";
    }
}